def generate_frames():
    global px, py, color, brushSize, eraserSize, canvas

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to capture video frame.")  # Debug statement added
            break
        frame = cv2.resize(frame, (1280, 720))  # Ensure proper resolution (resize to 1280x720)
        frame = cv2.flip(frame, 1)  # Mirror effect (flip horizontally)

        detector.findHands(frame)  # Detect hands
        positions = detector.getPostion(frame, draw=False)
        upFingers = detector.getUpFingers(frame)

        if upFingers:
            x, y = positions[8][0], positions[8][1]
            if upFingers[1] and not whiteBoard.isOver(x, y):
                px, py = 0, 0

                # handle color selection, size, and erase
                if not hidePenSizes:
                    for pen in pens:
                        if pen.isOver(x, y):
                            brushSize = int(pen.text)
                            pen.alpha = 0
                        else:
                            pen.alpha = 0.5

                if not hideColors:
                    for cb in colors:
                        if cb.isOver(x, y):
                            color = cb.color
                            cb.alpha = 0
                        else:
                            cb.alpha = 0.5

                if clear.isOver(x, y):
                    clear.alpha = 0
                    canvas = np.zeros((720, 1280, 3), np.uint8)

            # handle drawing
            if upFingers[1] and not upFingers[2]:
                if whiteBoard.isOver(x, y) and not hideBoard:
                    if px == 0 and py == 0:
                        px, py = positions[8]
                    if color == (0, 0, 0):
                        cv2.line(canvas, (px, py), positions[8], color, eraserSize)
                    else:
                        cv2.line(canvas, (px, py), positions[8], color, brushSize)
                    px, py = positions[8]
            else:
                px, py = 0, 0

        # overlay canvas and update frame
        if not hideBoard:
            whiteBoard.drawRect(frame)
            canvasGray = cv2.cvtColor(canvas, cv2.COLOR_BGR2GRAY)
            _, imgInv = cv2.threshold(canvasGray, 20, 255, cv2.THRESH_BINARY_INV)
            imgInv = cv2.cvtColor(imgInv, cv2.COLOR_GRAY2BGR)
            frame = cv2.bitwise_and(frame, imgInv)
            frame = cv2.bitwise_or(frame, canvas)

        # Create and yield frame
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
